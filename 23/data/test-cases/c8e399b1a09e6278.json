{"uid":"c8e399b1a09e6278","name":"test_labels_steps","fullName":"tests.test_labels#test_labels_steps","historyId":"5b90eb76543074e15111f16a1e9bbaef","time":{"start":1734612492229,"stop":1734612492418,"duration":189},"description":"Тест для проверки поиска необходимой информации","descriptionHtml":"<p>Тест для проверки поиска необходимой информации</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x562e5c52231a <unknown>\n#1 0x562e5c0386e0 <unknown>\n#2 0x562e5c06fdc8 <unknown>\n#3 0x562e5c06b926 <unknown>\n#4 0x562e5c0b76f6 <unknown>\n#5 0x562e5c0b6d46 <unknown>\n#6 0x562e5c0ab203 <unknown>\n#7 0x562e5c079cc0 <unknown>\n#8 0x562e5c07ac9e <unknown>\n#9 0x562e5c4efd0b <unknown>\n#10 0x562e5c4f3c92 <unknown>\n#11 0x562e5c4dcb3c <unknown>\n#12 0x562e5c4f4807 <unknown>\n#13 0x562e5c4c20df <unknown>\n#14 0x562e5c511578 <unknown>\n#15 0x562e5c511740 <unknown>\n#16 0x562e5c521196 <unknown>\n#17 0x7fadd229ca94 <unknown>\n#18 0x7fadd2329c3c <unknown>","statusTrace":"open_browser = None\n\n    @allure.tag('web')\n    @allure.feature(\"Задачи в репозитории\")\n    @allure.story(\"Успешная проверка Issue\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"owner\", \"Yaroslav Gusev\")\n    @allure.description(\"Тест для проверки поиска необходимой информации\")\n    @allure.link(\"https://github.com\", name=\"Testing\")\n    def test_labels_steps(open_browser):\n        @allure.step(\"Открываем главную страницу {url}\")\n        def open_main_page(url):\n            browser.open(url)\n    \n        @allure.step(\"Ищем репозиторий {repo}\")\n        def search_for_repository(repo):\n            browser.element('.header-search-button').click()\n    \n            browser.element('#query-builder-test').send_keys(repo)\n            browser.element('#query-builder-test').submit()\n    \n        @allure.step(\"Переходим по ссылке репозитория {repo}\")\n        def go_to_repository(repo):\n            browser.element(by.link_text(repo)).click()\n    \n        @allure.step(\"Открываем таб Issues\")\n        def open_issue_tab():\n            browser.element(\"#issues-tab\").click()\n    \n        @allure.step(\"Проверяем наличие Issue с названием {name}\")\n        def should_see_issue_with_name(name):\n            browser.element(by.partial_text(name)).should(be.visible)\n    \n>       open_main_page('/')\n\ntests/test_labels.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_labels.py:14: in open_main_page\n    browser.open(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/_browser.py:93: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:263: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:178: in get\n    driver = config.driver\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:305: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:66: in build_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:241: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:329: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7eff1faf6510>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...\\\\n#16 0x562e5c521196 \\\\u003Cunknown>\\\\n#17 0x7fadd229ca94 \\\\u003Cunknown>\\\\n#18 0x7fadd2329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x562e5c52231a <unknown>\nE       #1 0x562e5c0386e0 <unknown>\nE       #2 0x562e5c06fdc8 <unknown>\nE       #3 0x562e5c06b926 <unknown>\nE       #4 0x562e5c0b76f6 <unknown>\nE       #5 0x562e5c0b6d46 <unknown>\nE       #6 0x562e5c0ab203 <unknown>\nE       #7 0x562e5c079cc0 <unknown>\nE       #8 0x562e5c07ac9e <unknown>\nE       #9 0x562e5c4efd0b <unknown>\nE       #10 0x562e5c4f3c92 <unknown>\nE       #11 0x562e5c4dcb3c <unknown>\nE       #12 0x562e5c4f4807 <unknown>\nE       #13 0x562e5c4c20df <unknown>\nE       #14 0x562e5c511578 <unknown>\nE       #15 0x562e5c511740 <unknown>\nE       #16 0x562e5c521196 <unknown>\nE       #17 0x7fadd229ca94 <unknown>\nE       #18 0x7fadd2329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"open_browser","time":{"start":1734612490621,"stop":1734612490621,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Тест для проверки поиска необходимой информации","status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x562e5c52231a <unknown>\n#1 0x562e5c0386e0 <unknown>\n#2 0x562e5c06fdc8 <unknown>\n#3 0x562e5c06b926 <unknown>\n#4 0x562e5c0b76f6 <unknown>\n#5 0x562e5c0b6d46 <unknown>\n#6 0x562e5c0ab203 <unknown>\n#7 0x562e5c079cc0 <unknown>\n#8 0x562e5c07ac9e <unknown>\n#9 0x562e5c4efd0b <unknown>\n#10 0x562e5c4f3c92 <unknown>\n#11 0x562e5c4dcb3c <unknown>\n#12 0x562e5c4f4807 <unknown>\n#13 0x562e5c4c20df <unknown>\n#14 0x562e5c511578 <unknown>\n#15 0x562e5c511740 <unknown>\n#16 0x562e5c521196 <unknown>\n#17 0x7fadd229ca94 <unknown>\n#18 0x7fadd2329c3c <unknown>","statusTrace":"open_browser = None\n\n    @allure.tag('web')\n    @allure.feature(\"Задачи в репозитории\")\n    @allure.story(\"Успешная проверка Issue\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"owner\", \"Yaroslav Gusev\")\n    @allure.description(\"Тест для проверки поиска необходимой информации\")\n    @allure.link(\"https://github.com\", name=\"Testing\")\n    def test_labels_steps(open_browser):\n        @allure.step(\"Открываем главную страницу {url}\")\n        def open_main_page(url):\n            browser.open(url)\n    \n        @allure.step(\"Ищем репозиторий {repo}\")\n        def search_for_repository(repo):\n            browser.element('.header-search-button').click()\n    \n            browser.element('#query-builder-test').send_keys(repo)\n            browser.element('#query-builder-test').submit()\n    \n        @allure.step(\"Переходим по ссылке репозитория {repo}\")\n        def go_to_repository(repo):\n            browser.element(by.link_text(repo)).click()\n    \n        @allure.step(\"Открываем таб Issues\")\n        def open_issue_tab():\n            browser.element(\"#issues-tab\").click()\n    \n        @allure.step(\"Проверяем наличие Issue с названием {name}\")\n        def should_see_issue_with_name(name):\n            browser.element(by.partial_text(name)).should(be.visible)\n    \n>       open_main_page('/')\n\ntests/test_labels.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_labels.py:14: in open_main_page\n    browser.open(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/_browser.py:93: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:263: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:178: in get\n    driver = config.driver\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:305: in __get__\n    driver = config.build_driver_strategy(config)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py:66: in build_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:241: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:329: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7eff1faf6510>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...\\\\n#16 0x562e5c521196 \\\\u003Cunknown>\\\\n#17 0x7fadd229ca94 \\\\u003Cunknown>\\\\n#18 0x7fadd2329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x562e5c52231a <unknown>\nE       #1 0x562e5c0386e0 <unknown>\nE       #2 0x562e5c06fdc8 <unknown>\nE       #3 0x562e5c06b926 <unknown>\nE       #4 0x562e5c0b76f6 <unknown>\nE       #5 0x562e5c0b6d46 <unknown>\nE       #6 0x562e5c0ab203 <unknown>\nE       #7 0x562e5c079cc0 <unknown>\nE       #8 0x562e5c07ac9e <unknown>\nE       #9 0x562e5c4efd0b <unknown>\nE       #10 0x562e5c4f3c92 <unknown>\nE       #11 0x562e5c4dcb3c <unknown>\nE       #12 0x562e5c4f4807 <unknown>\nE       #13 0x562e5c4c20df <unknown>\nE       #14 0x562e5c511578 <unknown>\nE       #15 0x562e5c511740 <unknown>\nE       #16 0x562e5c521196 <unknown>\nE       #17 0x7fadd229ca94 <unknown>\nE       #18 0x7fadd2329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","steps":[{"name":"Открываем главную страницу '/'","time":{"start":1734612492229,"stop":1734612492417,"duration":188},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x562e5c52231a <unknown>\n#1 0x562e5c0386e0 <unknown>\n#2 0x562e5c06fdc8 <unknown>\n#3 0x562e5c06b926 <unknown>\n#4 0x562e5c0b76f6 <unknown>\n#5 0x562e5c0b6d46 <unknown>\n#6 0x562e5c0ab203 <unknown>\n#7 0x562e5c079cc0 <unknown>\n#8 0x562e5c07ac9e <unknown>\n#9 0x562e5c4efd0b <unknown>\n#10 0x562e5c4f3c92 <unknown>\n#11 0x562e5c4dcb3c <unknown>\n#12 0x562e5c4f4807 <unknown>\n#13 0x562e5c4c20df <unknown>\n#14 0x562e5c511578 <unknown>\n#15 0x562e5c511740 <unknown>\n#16 0x562e5c521196 <unknown>\n#17 0x7fadd229ca94 <unknown>\n#18 0x7fadd2329c3c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa_guru_lesson_10/qa_guru_lesson_10/tests/test_labels.py\", line 14, in open_main_page\n    browser.open(url)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/_browser.py\", line 93, in open\n    self.config._executor.get_url(relative_or_absolute_url)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 263, in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 178, in get\n    driver = config.driver\n             ^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 305, in __get__\n    driver = config.build_driver_strategy(config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 129, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 66, in build_chrome\n    return Chrome(\n           ^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 241, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 329, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'/'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"open_browser::0","time":{"start":1734612492958,"stop":1734612493148,"duration":190},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5629fe9f931a <unknown>\n#1 0x5629fe50f6e0 <unknown>\n#2 0x5629fe546dc8 <unknown>\n#3 0x5629fe542926 <unknown>\n#4 0x5629fe58e6f6 <unknown>\n#5 0x5629fe58dd46 <unknown>\n#6 0x5629fe582203 <unknown>\n#7 0x5629fe550cc0 <unknown>\n#8 0x5629fe551c9e <unknown>\n#9 0x5629fe9c6d0b <unknown>\n#10 0x5629fe9cac92 <unknown>\n#11 0x5629fe9b3b3c <unknown>\n#12 0x5629fe9cb807 <unknown>\n#13 0x5629fe9990df <unknown>\n#14 0x5629fe9e8578 <unknown>\n#15 0x5629fe9e8740 <unknown>\n#16 0x5629fe9f8196 <unknown>\n#17 0x7f55dc49ca94 <unknown>\n#18 0x7f55dc529c3c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 907, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/qa_guru_lesson_10/qa_guru_lesson_10/tests/conftest.py\", line 17, in open_browser\n    browser.quit()\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/_browser.py\", line 143, in quit\n    self.driver.quit()\n    ^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/_browser.py\", line 34, in driver\n    return self.config.driver\n           ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 305, in __get__\n    driver = config.build_driver_strategy(config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 129, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selene/core/configuration.py\", line 66, in build_chrome\n    return Chrome(\n           ^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 241, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 329, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"owner","value":"Yaroslav Gusev"},{"name":"feature","value":"Задачи в репозитории"},{"name":"severity","value":"critical"},{"name":"story","value":"Успешная проверка Issue"},{"name":"tag","value":"web"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_labels"},{"name":"host","value":"fv-az1267-750"},{"name":"thread","value":"2321-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_labels"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Testing","url":"https://github.com","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"critical","owner":"Yaroslav Gusev","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["web"]},"source":"c8e399b1a09e6278.json","parameterValues":[]}